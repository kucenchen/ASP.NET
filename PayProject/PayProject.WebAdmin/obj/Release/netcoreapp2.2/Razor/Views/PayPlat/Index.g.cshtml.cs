#pragma checksum "D:\work\PayProject\PayProject\PayProject\PayProject.WebAdmin\Views\PayPlat\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "66f867f9f9ff2048ebc855c72dbbfb28daff1741"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_PayPlat_Index), @"mvc.1.0.view", @"/Views/PayPlat/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/PayPlat/Index.cshtml", typeof(AspNetCore.Views_PayPlat_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\work\PayProject\PayProject\PayProject\PayProject.WebAdmin\Views\_ViewImports.cshtml"
using PayProject.WebAdmin;

#line default
#line hidden
#line 2 "D:\work\PayProject\PayProject\PayProject\PayProject.WebAdmin\Views\_ViewImports.cshtml"
using PayProject.WebAdmin.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"66f867f9f9ff2048ebc855c72dbbfb28daff1741", @"/Views/PayPlat/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3ae8485cd9f822422ef74d5ef8a2d0b24daf65d2", @"/Views/_ViewImports.cshtml")]
    public class Views_PayPlat_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<PayProject.Entity.PayPlat>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "D:\work\PayProject\PayProject\PayProject\PayProject.WebAdmin\Views\PayPlat\Index.cshtml"
  
    ViewBag.Title = "渠道管理";
    Layout = PayProject.Common.Utils.Pjax();

#line default
#line hidden
            BeginContext(116, 9238, true);
            WriteLiteral(@"<script>
    var isLoadPayType = false;
    var paytypeArr = new Array();
    layui.use('layer', function () {
        var $ = layui.$
            , layer = layui.layer;
        $.ajax({
            type: 'get',
            url: ""/api/paytype/getapipages"",
            success: function (res) {
                if (res.msg === ""success"") {
                    $.each(res.data, function (i, val) {
                        paytypeArr[val.type_id] = val.type_name;
                    });
                    isLoadPayType = true;
                }
            }
        });
    });
</script>
<div id=""container"">
    <style>
        /*.layui-inline {width: 20%;}*/
    </style>
    <div class=""list-wall"">
        <div class=""layui-form list-search"" style=""margin-top:10px;"">
            <div class=""layui-inline"">
                <input class=""layui-input"" id=""platname"" autocomplete=""off"" placeholder=""输入渠道名称查询"">
            </div>
            <div class=""layui-inline"">
                <input ");
            WriteLiteral(@"class=""layui-input"" id=""platclass"" autocomplete=""off"" placeholder=""输入渠道类名查询"">
            </div>
            
            <button type=""button"" id=""search"" class=""layui-btn layui-btn-sm"" data-type=""toolSearch""><i class=""layui-icon layui-icon-search""></i> 搜索</button>

        </div>
        <table class=""layui-hide"" id=""tablist"" lay-filter=""tool""></table>
    </div>
    <input type=""hidden"" id=""isSave"" value=""0"" />
    <script type=""text/html"" id=""toolbar"">
        <div class=""layui-btn-container"">
            <button type=""button"" class=""layui-btn layui-btn-sm"" lay-event=""toolAdd""><i class=""layui-icon""></i> 新增</button>
            <button type=""button"" class=""layui-btn layui-btn-sm"" lay-event=""toolDel""><i class=""layui-icon""></i> 删除</button>
        </div>
    </script>
    <script>

        layui.config({
            base: '/themes/js/modules/'
        }).use(['table', 'layer', 'jquery', 'laydate', 'common', 'form'],
            function () {
                var table = layui.table,
  ");
            WriteLiteral(@"                  layer = layui.layer,
                    $ = layui.jquery,
                    os = layui.common,
                    laydate = layui.laydate,
                    form = layui.form;
                form.render();
                //laydate.render({
                //    elem: '#queryValue3'
                //    , theme: '#393D49'
                //    , type: 'datetime'
                //    , format: 'yyyy/MM/dd HH:mm:ss'
                //    , range: true
                //});

                table.render({
                    toolbar: '#toolbar',
                    elem: '#tablist',
                    headers: os.getToken(),
                    url: '/api/payplat/getpages',
                    cols: [
                        [
                            { type: 'checkbox', fixed: 'left' },
                            { field: 'plat_id', title: 'ID', width: 90, sort: true, fixed: 'left' },
                            { field: 'plat_name', title: '渠道名称', width: 1");
            WriteLiteral(@"30 },
                            { field: 'plat_class', title: '渠道类名', width: 110 },
                            { field: 'pay_gateway', title: '支付网关', width: 220 },
                            { field: 'req_gateway', title: '查询网关', width: 220 },
                            { field: 'pay_type_list', title: '支持类型', width: 200, templet: '<div>{{ ShowPayType(d.pay_type_list)}}</div>' },
                            { width: 100, title: '操作', templet: '#tool' }
                        ]
                    ],
                    page: { limits: [10, 20, 50, 100, 500, 1000, 5000, 10000], groups: 8 },
                    id: 'tables',
                    initSort: {
                        field: 'plat_id',
                        order: 'desc'
                    },
                    sort: true,
                    where: {
                        field: 'plat_id',
                        order: 'desc'
                    }
                });

                var guid = '', active = {
    ");
            WriteLiteral(@"                reload: function () {
                        table.reload('tables',
                            {
                                page: {
                                    curr: 1
                                },
                                where: {
                                    platname: $(""#platname"").val(),
                                    platclass: $(""#platclass"").val(),
                                    field: 'plat_id',
                                    order: 'desc'
                                }//,
                                //done: function () {
                                //    Util.setMenuBtnRignt(4002);
                                //}
                            });
                    },
                    toolAdd: function () {
                        os.Open('添加', '/payplat/edit', '600px', '450px', function () {
                            if (parseInt($(""#isSave"").val()) === 1) {
                                $(""#isS");
            WriteLiteral(@"ave"").val('0');
                                active.reload();
                            }
                        });
                    },
                    toolDel: function () {
                        var checkStatus = table.checkStatus('tables')
                            , data = checkStatus.data;
                        if (data.length === 0) {
                            os.error(""请选择要删除的项目~"");
                            return;
                        }
                        var str = '', strCount = 0;
                        $.each(data, function (i, item) {
                            str += item.plat_id + "","";
                            strCount++;
                        });
                        title = '确定要删除所选的' + strCount + '项?';
                        layer.confirm(title, function (index) {
                            layer.close(index);
                            var loadindex = layer.load(1, {
                                shade: [0.1, '#000']
     ");
            WriteLiteral(@"                       });
                            os.ajax('api/payplat/delete/', { parm: str }, function (res) {
                                layer.close(loadindex);
                                if (res.statusCode === 200) {
                                    active.reload();
                                    os.success('删除成功！');
                                } else {
                                    os.error(res.message);
                                }
                            });
                        });

                    },
                    toolEdit: function (id) {
                        os.Open('编辑', '/payplat/edit?id=' + id, '600px', '450px', function () {
                            if (parseInt($(""#isSave"").val()) === 1) {
                                $(""#isSave"").val('0');
                                active.reload();
                            }
                        })
                    },
                    toolSearch: function ()");
            WriteLiteral(@" {
                        active.reload();
                    }
                };
                table.on('toolbar(tool)', function (obj) {
                    active[obj.event] ? active[obj.event].call(this) : '';
                });
                table.on('tool(tool)', function (obj) {
                    var data = obj.data;
                    if (obj.event === 'edit') {
                        active.toolEdit(data.plat_id);
                    }
                });
                $('.list-search .layui-btn').on('click', function () {
                    var type = $(this).data('type');
                    active[type] ? active[type].call(this) : '';
                });
                table.on('sort(tool)', function (obj) {

                    table.reload('tables', {
                        initSort: obj,
                        where: {
                            field: obj.field,
                            order: obj.type
                        }
                   ");
            WriteLiteral(@" });
                });
                window.active = active;
            });
        function ShowPayType(typeli) {
            if (isLoadPayType) {
                if (typeof (typeli) == ""undefined"") {
                    return typeli;
                }
                var typeArr = typeli.split("","");
                var str = """";
                for (var i = 0; i < typeArr.length; i++) {
                    str += "","" + paytypeArr[typeArr[i]];
                }
                str = str.substr(1);
                return str;
            }
            else {
                return typeli;
            }
        }
    </script>
    <script type=""text/html"" id=""switchOpen"">
        <input type=""checkbox"" name=""status"" disabled value=""{{d.userid}}"" lay-skin=""switch"" lay-text=""正常|禁用"" {{ d.nullity==0?'checked':''}}>
    </script>
    <script type=""text/html"" id=""tool"">
        <a class=""layui-btn layui-btn-primary layui-btn-xs"" lay-event=""edit""><i class=""layui-icon""></i> 修改</a>
   ");
            WriteLiteral(" </script>\r\n</div>\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<PayProject.Entity.PayPlat> Html { get; private set; }
    }
}
#pragma warning restore 1591
